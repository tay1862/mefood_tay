// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? 
  access_token      String? 
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? 
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique // e.g., "Admin", "Waiter", "Kitchen", "Cafe", "WaterStation", "Cashier"
  description String?
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model User {
  id            String    @id @default(cuid())
  
  // Authentication fields
  email         String    @unique
  password      String?
  emailVerified DateTime?
  
  // User profile
  ownerName     String?   // Restaurant owner's name or staff name
  ownerImage    String?
  
  // Restaurant information (merged from Restaurant model)
  restaurantName        String?
  restaurantDescription String?
  restaurantAddress     String?
  restaurantPhone       String?
  restaurantEmail       String?
  isRestaurantActive    Boolean  @default(true)
  
  // Staff management fields
  roleId        String?   // Role assignment for staff
  isStaff       Boolean   @default(false) // Distinguish between owner and staff
  restaurantOwnerId String? // Link staff to restaurant owner
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  accounts        Account[]
  sessions        Session[]
  categories      Category[]
  menuItems       MenuItem[]
  orders          Order[] @relation("UserOrders")
  tables          Table[]
  customerSessions CustomerSession[] @relation("UserSessions")
  payments        Payment[]
  settings        RestaurantSettings?
  departments     Department[]
  
  // Role relation
  role            Role?     @relation(fields: [roleId], references: [id], onDelete: SetNull)
  
  // Staff relations
  restaurantOwner User?     @relation("RestaurantStaff", fields: [restaurantOwnerId], references: [id], onDelete: Cascade)
  staff           User[]    @relation("RestaurantStaff")
  waitingSessions CustomerSession[] @relation("WaiterSessions")
  waitingOrders   Order[] @relation("OrderWaiter")
  cookingOrders   Order[] @relation("OrderCook")  
  servedOrders    Order[] @relation("OrderServer")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Table Management Model
model Table {
  id           String     @id @default(cuid())
  number       String     // Table number (e.g., "1", "A1", "VIP-01")
  name         String?    // Optional table name (e.g., "Window seat", "VIP table")
  capacity     Int        @default(4) // Number of guests the table can accommodate
  isActive     Boolean    @default(true)
  sortOrder    Int        @default(0) // Order for table display and management
  qrCode       String?    // QR code for table ordering
  qrCodeActive Boolean    @default(true) // Whether QR code is active for ordering
  // Grid layout position fields
  gridX        Int        @default(0)  // Grid column position (0-11)
  gridY        Int        @default(0)  // Grid row position
  gridWidth    Int        @default(2)  // Width in grid units
  gridHeight   Int        @default(2)  // Height in grid units
  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders       Order[]
  sessions     CustomerSession[]
  qrSessions   QRSession[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([userId, number])
}

// QR Code Session Management
model QRSession {
  id           String     @id @default(cuid())
  sessionToken String     @unique // Unique token for QR session
  tableId      String
  table        Table      @relation(fields: [tableId], references: [id], onDelete: Cascade)
  isActive     Boolean    @default(true)
  customerName String?    // Optional customer name
  guestCount   Int        @default(1) // Number of guests
  orders       Order[]
  staffCalls   StaffCall[]
  musicRequests MusicRequest[]
  billSplits   BillSplit[]   @relation("QRSessionBillSplits")
  startedAt    DateTime   @default(now())
  endedAt      DateTime?  // When session was closed/bill paid
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  mergedIntoQrSessionId String? @map("merged_into_qr_session_id") // Reference to the QrSession it was merged into
  mergedIntoQrSession   QRSession? @relation("MergedSessions", fields: [mergedIntoQrSessionId], references: [id])
  mergedSessions        QRSession[] @relation("MergedSessions")
}

// Staff Call System
model StaffCall {
  id           String     @id @default(cuid())
  qrSessionId  String
  qrSession    QRSession  @relation(fields: [qrSessionId], references: [id], onDelete: Cascade)
  type         StaffCallType @default(GENERAL)
  message      String?    // Optional message from customer
  status       StaffCallStatus @default(PENDING)
  respondedBy  String?    // Staff member who responded
  respondedAt  DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

enum StaffCallType {
  GENERAL      // General assistance
  WATER        // Request for water
  BILL         // Request for bill
  COMPLAINT    // Complaint or issue
  ASSISTANCE   // Need help with order
}

enum StaffCallStatus {
  PENDING      // Waiting for staff response
  ACKNOWLEDGED // Staff has seen the call
  RESPONDED    // Staff has responded/resolved
  CANCELLED    // Customer cancelled the call
}

// Music Request System
model MusicRequest {
  id           String     @id @default(cuid())
  qrSessionId  String
  qrSession    QRSession  @relation(fields: [qrSessionId], references: [id], onDelete: Cascade)
  songTitle    String
  artist       String?
  message      String?    // Optional message with request
  status       MusicRequestStatus @default(PENDING)
  respondedBy  String?    // Staff member who responded
  respondedAt  DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

enum MusicRequestStatus {
  PENDING      // Waiting for staff response
  APPROVED     // Request approved, will play
  DECLINED     // Request declined
  PLAYING      // Currently playing
  COMPLETED    // Finished playing
}

// Menu Management Models
model Category {
  id           String     @id @default(cuid())
  name         String
  description  String?
  isActive     Boolean    @default(true)
  sortOrder    Int        @default(0)
  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  menuItems    MenuItem[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([userId, name])
}

model Department {
  id          String     @id @default(cuid())
  name        String     @unique // e.g., "Water Station", "Cafe", "Kitchen"
  description String?
  userId      String     // Link to the restaurant owner
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  menuItems   MenuItem[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model MenuItem {
  id           String     @id @default(cuid())
  name         String
  description  String?
  price        Float    
  image        String?
  isActive     Boolean    @default(true)
  isAvailable  Boolean    @default(true)
  sortOrder    Int        @default(0)
  userId       String
  categoryId   String
  departmentId String?    // Link to department for order routing
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  category     Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  department   Department? @relation(fields: [departmentId], references: [id], onDelete: SetNull)
  orderItems   OrderItem[]
  selections   Selection[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Selection {
  id           String           @id @default(cuid())
  name         String           // e.g., "Size", "Toppings", "Add-ons"
  description  String?
  isRequired   Boolean          @default(false)
  allowMultiple Boolean         @default(false) // true for multiple selection, false for single
  sortOrder    Int              @default(0)
  menuItemId   String
  menuItem     MenuItem         @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
  options      SelectionOption[]
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model SelectionOption {
  id          String    @id @default(cuid())
  name        String    // e.g., "Small", "Large", "Extra Cheese"
  description String?
  priceAdd    Float    @default(0) // additional price
  isAvailable Boolean   @default(true)
  sortOrder   Int       @default(0)
  selectionId String
  selection   Selection @relation(fields: [selectionId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Customer Session Management
model CustomerSession {
  id           String            @id @default(cuid())
  customerName String?
  customerPhone String?
  customerEmail String?
  partySize    Int               @default(1)
  status       SessionStatus     @default(WAITING)
  tableId      String?
  userId       String
  waiterId     String?           // Staff member handling the table
  checkInTime  DateTime          @default(now())
  seatedTime   DateTime?
  checkOutTime DateTime?
  notes        String?
  user         User              @relation("UserSessions", fields: [userId], references: [id], onDelete: Cascade)
  table        Table?            @relation(fields: [tableId], references: [id], onDelete: SetNull)
  waiter       User?             @relation("WaiterSessions", fields: [waiterId], references: [id], onDelete: SetNull)
  orders       Order[]
  payments     Payment[]
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
}

enum SessionStatus {
  WAITING       // Customer checked in, waiting for table
  SEATED        // Customer seated at table
  ORDERING      // Taking order
  ORDERED       // Order placed, kitchen preparing
  SERVING       // Food being served
  DINING        // Customer dining
  BILLING       // Ready for bill
  COMPLETED     // Session completed, customer left
  CANCELLED     // Session cancelled
}

model CancellationReason {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  reason      String    @unique
  orders      Order[]
}

// Order Management Models
model Order {
  id             String         @id @default(cuid())
  orderNumber    String         // Removed @unique constraint
  subOrderNumber String?        // Sub-order number (e.g., "01", "02", etc.)
  mainOrderId    String?        // Reference to the main order if this is a sub-order
  mainOrder      Order?         @relation("MainSubOrders", fields: [mainOrderId], references: [id], onDelete: SetNull)
  subOrders      Order[]        @relation("MainSubOrders")
  status         OrderStatus    @default(PENDING)
  totalAmount    Float        
  customerName   String?
  customerPhone  String?
  customerEmail  String?
  notes          String?
  tableId        String?        // Optional table for dine-in orders
  sessionId      String?        // Link to customer session
  qrSessionId    String?        // Link to QR session
  userId         String
  waiterId       String?        // Staff member who took the order
  cookId         String?        // Kitchen staff assigned to prepare
  servedBy       String?        // Staff member who served the order
  orderedAt      DateTime       @default(now())
  preparingAt    DateTime?      // When kitchen started preparing
  readyAt        DateTime?      // When order is ready to serve
  servedAt       DateTime?      // When order was served
  user           User           @relation("UserOrders", fields: [userId], references: [id], onDelete: Cascade)
  table          Table?         @relation(fields: [tableId], references: [id], onDelete: SetNull)
  session        CustomerSession? @relation(fields: [sessionId], references: [id], onDelete: SetNull)
  qrSession      QRSession?     @relation(fields: [qrSessionId], references: [id], onDelete: SetNull)
  waiter         User?          @relation("OrderWaiter", fields: [waiterId], references: [id], onDelete: SetNull)
  cook           User?          @relation("OrderCook", fields: [cookId], references: [id], onDelete: SetNull)
  server         User?          @relation("OrderServer", fields: [servedBy], references: [id], onDelete: SetNull)
  items          OrderItem[]
  billSplits     BillSplit[]    @relation("OrderBillSplits")
  payments       Payment[]      @relation("PaymentOrders")
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  cancellationReasonId String? // Optional: If cancelled
  cancellationReason CancellationReason? @relation(fields: [cancellationReasonId], references: [id])
}

model OrderItem {
  id         String   @id @default(cuid())
  quantity   Int
  price      Decimal  
  notes      String?  
  selections Json?    // Store selected options as JSON
  orderId    String
  menuItemId String
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  status          String @default("PENDING") // PENDING, PREPARING, READY, SERVED, CANCELLED
}

enum OrderStatus {
  PENDING       // Order created, waiting for confirmation
  CONFIRMED     // Order confirmed, sent to kitchen
  PREPARING     // Kitchen is preparing the order
  READY         // Order ready for serving
  SERVING       // Order being served to customer
  DELIVERED     // Order delivered to customer
  COMPLETED     // Order completed and paid
  CANCELLED     // Order cancelled
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  MOBILE_PAYMENT
  BANK_TRANSFER
  OTHER
}

model BillSplit {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  totalAmount  Float
  paidAmount   Float   @default(0)
  status       String    @default("PENDING") // PENDING, PAID, PARTIAL_PAID
  qrSessionId  String
  qrSession    QRSession @relation("QRSessionBillSplits", fields: [qrSessionId], references: [id])
  orderId      String?
  order        Order?    @relation("OrderBillSplits", fields: [orderId], references: [id])
}

// Payment/Billing Management Models
model Payment {
  id                String            @id @default(cuid())
  paymentNumber     String            // Unique payment/receipt number
  sessionId         String            // Reference to customer session
  userId            String
  
  // Session and table snapshot data (copied at payment time)
  customerName      String?
  customerPhone     String?
  customerEmail     String?
  partySize         Int
  tableNumber       String            // Table number at payment time
  tableName         String?           // Table name at payment time
  checkInTime       DateTime
  checkOutTime      DateTime
  
  // Restaurant snapshot data
  restaurantName    String            // Restaurant name at payment time
  restaurantAddress String?           // Restaurant address at payment time
  restaurantPhone   String?           // Restaurant phone at payment time
  
  // Payment details
  paymentMethod     PaymentMethod     @default(CASH)
  subtotalAmount    Decimal            // Total of all items
  discountAmount    Decimal            @default(0)
  extraChargesAmount Decimal           @default(0)
  finalAmount       Decimal            // Amount after charges/discounts
  receivedAmount    Decimal?           // For cash payments
  changeAmount      Decimal?           // For cash payments
  
  // Additional data
  notes             String?           
  extraCharges      Json?             // Store extra charges as JSON array
  
  // Relations
  session           CustomerSession   @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders            Order[]           @relation("PaymentOrders")
  items             PaymentItem[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model RestaurantSettings {
  id                    String     @id @default(cuid())
  userId                String     @unique
  user                  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  currency              String     @default("THB") // e.g., THB, USD, LAK
  language              String     @default("th")  // e.g., th, en, lo
  serviceChargeRate     Float    @default(0)
  printKitchenReceipt   Boolean    @default(true)
  printCustomerReceipt  Boolean    @default(true)
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
}

model PaymentItem {
  id                String    @id @default(cuid())
  paymentId         String
  
  // Menu item snapshot data (copied at payment time)
  menuItemName      String
  menuItemDescription String?
  menuItemPrice     Decimal   
  categoryName      String
  
  // Order item data
  quantity          Int
  unitPrice         Decimal    // Price per unit including selections
  totalPrice        Decimal    // quantity * unitPrice
  notes             String?   
  selections        Json?     // Selected options as JSON
  
  // Relations
  payment           Payment   @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}



